#----------------------------------------------------------------------------
# NOTAS IMPORTANTES CONFIGURACIÓN ARCHIVO application.properties
# PARA CONFIGURAR BASE DE DATOS H2 O MYSQL
#----------------------------------------------------------------------------

# NOTA: Habilitamos la configuración para la consola web de H2. Y la cual accedemos a través de un navegador web a través
#       de la url http://localhost:8080/h2-console.
#       Importante es que el JDBC URL y el usuario que coloquemos en el formulario web que se nos muestra
#       corresponda al generado y que podemos ver en la consola de ejecución 
#
#       Ejemplo: 
#       JDBC URL: jdbc:h2:mem:3fb4dd80-8cb4-4033-a06b-b0b983cab189)
#       User Name: sa
#
#       Por defecto el usuario es sa sin contrasena.

# NOTA: Comentamos esta línea para no habilitar la consola de H2 ya que ahora vamos a usar una base de datos MySQL
#spring.h2.console.enabled=true

# NOTA: La siguiente configuración es para cambiar de la base de datos H2 en desarrollo a una base de deatos MySQL
#       local, adicionelmente en la url podemos pasar la zona horaria y SSL si es necesario.
spring.datasource.url=jdbc:mysql://localhost/db_springboot?serverTimezone=America/Bogota&useSSL=false
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# NOTA: Para el dialecto tenemos que tener en cuenta la versión de MySQL que tenemos instalada, para el curso usan la 8 pero en 
#       mi caso tengo instalada la 5.7 por lo tanto pasamos el 57
spring.jpa.database-platform = org.hibernate.dialect.MySQL57Dialect

# Lo siguiente es una configuración importante pero solo para desarrollar o probar la aplicación ya que esto no lo haríamos en
# entornos de producción. Ya que dicha configuración se encarga de crear la tabla o tablas del proyecto de forma automática en 
# la base de datos a través de los mapping de la clase Entity. Adicionalmente esto crea las tablas al momento de levantar la 
# aplicación y las elimina cuando se baja por lo tanto es importante que esto solo sea en desarrollo.
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=create-drop

# La siguiente configuración permite que se nos mustren las consultas nativas que genera JPA en el terminal y las cuales son generadas
# detrás de escena.
logging.level.org.hibernate.SQL=debug